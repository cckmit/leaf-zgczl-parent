<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: Harry  
    $Date: 2017-9-4 上午11:10:19  
    $Revision: 1.0  
    $Purpose: 保险费支付/copy付款申请支付(modules/csh/CSH502/csh_payment_req_pay.screen)
-->
<a:screen xmlns:a="http://www.aurora-framework.org/application" trace="true">
    <a:init-procedure>
        <!-- <a:model-query autoCount="false" defaultWhereClause=" contract_id=${/parameter/@contract_id}" fetchAll="true" model="csh.CSH501.csh_payment_req_selected" rootPath="payment_req_selected"/> -->
        <a:model-query autoCount="false" defaultWhereClause=" document_category=&apos;PAYMENT_REQ&apos; and  enabled_flag=&apos;Y&apos;" fetchAll="true" model="hls.HLS003.hls_document_type" rootPath="payment_document_type"/>
        <a:model-query autoCount="false" defaultWhereClause=" enabled_flag=&apos;Y&apos;" fetchAll="true" model="gld.gld_exchangerate_types" rootPath="exchangerate_types"/>
        <a:model-query autoCount="false" defaultWhereClause=" payment_req_id=${/parameter/@payment_req_id}" fetchAll="true" model="csh.CSH502.csh_payment_req_pay_query" rootPath="csh_payment_req_pay_query"/>
        <a:model-query fetchAll="true" model="csh.CSH511.csh_transaction_default_exchange_rate_type" rootPath="default_exchange_rate_type_path"/>
        <a:model-query defaultWhereClause="t1.enabled_flag=&apos;Y&apos;" fetchAll="true" model="basic.csh_payment_method_for_lov" rootPath="payment_method_path"/>
        <a:model-query fetchAll="true" model="gld.gld_exchangerate_type_lov" rootPath="exchangerate_type_path"/>
    </a:init-procedure>
    <a:view>
        <div/>
        <a:link id="csh_payment_req_pay_query" url="${/request/@context_path}/modules/csh/CSH502/csh_payment_req_query.screen"/>
        <a:link id="csh_payment_req_pay_link_id" url="${/request/@context_path}/modules/csh/CSH502/csh_payment_req_pay.svc"/>
        <a:link id="get_period_name_id" model="csh.CSH511.csh_transaction_get_period_name" modelaction="query"/>
        <a:link id="get_exchange_rate_link_id" model="csh.CSH511.csh_transaction_get_exchange_rate" modelaction="query"/>
        <a:link id="csh_bond_return_req_link_id" url="${/request/@context_path}/modules/csh/CSH713/csh_insurance_req.screen"/>
        <script><![CDATA[
            function csh502_pay_lock_window() {
                Aurora.Masker.mask($('${/parameter/@winid}').wrap, '${l:HLS.EXECUTING}');
            }
            
            function csh502_pay_unlock_window() {
                Aurora.Masker.unmask($('${/parameter/@winid}').wrap);
            }
            
            function csh502_payment_pay_submit() {
                var record = $('csh_payment_req_pay_ds').getCurrentRecord();
                //if (record.validateRecord(true)) {
                ajax_flag = 'Y';
                csh502_pay_lock_window();
                var param = record.data;
                var saveData = [];
                var pre_line_records = $('${/parameter/@lnds_id}').getSelected();
                for (var i = 0;i < pre_line_records.length;i++) {
                    var pre_line_record = pre_line_records[i];
                    pre_line_record.set('_status', 'insert');
                    pre_line_record.set('type', 'PAYMENT_REQ_PAYMENT');
                    pre_line_record.set('id', pre_line_record.get('payment_req_ln_id'));
                    pre_line_record.set('amt', record.get('transaction_amount') || 0);
                    saveData.push(pre_line_record.data);
                    // }
                    param['merge_flag'] = 'Y';
                    param['auto_approved_flag'] = 'Y';
                    param['details'] = saveData;
                    Aurora.showConfirm('${l:PROMPT_MESSAGE}', '确定提交？', function okFun() {
                        Aurora.request({
                            url: $('csh_payment_req_pay_link_id').getUrl(),
                            para: param,
                            success: function(res) {
                                Aurora.SideBar.show({
                                    msg: '${l:HLS.SUBMIT_SUCCESS}',
                                    duration: 2000
                                });
                                csh502_pay_unlock_window();
                                window.location.href = $('csh_bond_return_req_link_id').getUrl();
                                //csh502_payment_pay_back();
                            },
                            failure: function() {
                                csh502_pay_unlock_window();
                            },
                            error: function() {
                                csh502_pay_unlock_window();
                            },
                            scope: this
                        });
                    }, function cacelFun() {
                        csh502_pay_unlock_window();
                    });
                    csh502_pay_unlock_window();
                }
            }
            
            function csh502_payment_pay_back() {
                $('${/parameter/@winid}').close();
            }
            
            function csh502_payment_pay_reset() {
                $('csh_payment_req_pay_ln_ds').setQueryParameter('payment_req_id', '${/parameter/@payment_req_id}');
                $('csh_payment_req_pay_ln_ds').query();
                //load_complete();
            
            }
            
            function execute_exchange_rate_type(ds) {
                var record = ds.getCurrentRecord();
                record.getField('bp_bank_account_code').setLovPara('bp_id', record.get('bp_id'));
                var value = record.get('currency_code');
                var functional_currency_code = '${/model/default_exchange_rate_type_path/record/@functional_currency_code}';
                //record.getField('bank_account_code').setLovPara('currency_code', value);
                record.set('functional_currency_code', functional_currency_code);
                record.set('exchange_rate', '');
                record.set('exchange_rate_type', '');
                record.set('rate_method_code', '');
                record.set('exchange_rate_type_display', '');
                record.set('exchange_rate_quotation', '');
                if (value == functional_currency_code) {
                    record.getField('exchange_rate_type_display').setRequired(false);
                    record.getField('exchange_rate_type').setReadOnly(true);
                    record.getField('exchange_rate_type_display').setReadOnly(true);
                    record.getField('exchange_rate').setReadOnly(true);
                    record.set('exchange_rate', 1);
                } else {
                    record.set('exchange_rate_type', '${/model/fnd_financial_option_path/record/@default_exchange_rate_type}');
                    record.set('rate_method_code', '${/model/fnd_financial_option_path/record/@rate_method_code}');
                    record.set('exchange_rate_type_display', '${/model/fnd_financial_option_path/record/@exchange_rate_type_display}');
                    record.getField('exchange_rate_type_display').setRequired(true);
                    record.getField('exchange_rate_type_display').setReadOnly(false);
                }
            }
            
            function on_csh_payment_req_pay_ds_add(ds) {
                var pre_ln_ds = $('${/parameter/@lnds_id}'),
                    pre_hd_ds = $('${/parameter/@hdds_id}');
                var current_bp_bank_account_id = '';
                var pre_ln_records = pre_ln_ds.getSelected();
                var pre_hd_record = pre_hd_ds.getCurrentRecord();
                var current_record = ds.getCurrentRecord();
                var sum_pay_amount = 0;
                var sum_residual_amount = 0;
                for (var i = 0;i < pre_ln_records.length;i++) {
                    var pre_ln_record = pre_ln_records[i];
                    sum_pay_amount = plus(sum_pay_amount, pre_ln_record.get('pay_amount') || 0);
                    sum_residual_amount = plus(sum_residual_amount, pre_ln_record.get('residual_amount') || 0);
                    if (!current_bp_bank_account_id && pre_ln_record.get('bp_bank_account_id')) {
                        current_bp_bank_account_id = pre_ln_record.get('bp_bank_account_id');
                    }
                    if (current_bp_bank_account_id && pre_ln_record.get('bp_bank_account_id') && current_bp_bank_account_id != pre_ln_record.get('bp_bank_account_id')) {
                        current_record.getField('bp_bank_account_code').setReadOnly(true);
                    }
                }
                current_record.set('transaction_amount', sum_pay_amount);
                current_record.set('residual_amount', sum_residual_amount);
                current_record.set('transaction_amount', sum_residual_amount);
                current_record.set('bp_id', pre_ln_records[0].get('bp_id'));
                current_record.set('bp_name', pre_ln_records[0].get('bp_name'));
                current_record.set('functional_currency_code', '${/model/default_exchange_rate_type_path/record/@functional_currency_code}');
                current_record.set('currency_code', pre_ln_records[0].get('currency_code'));
                current_record.set('currency_name', pre_ln_records[0].get('currency_name'));
                // current_record.set('transaction_date', pre_hd_record.get('req_date'));
                current_record.set('transaction_date', ''); // 2017-07-11 by 9796
                execute_exchange_rate_type(ds);
            }
            
            function on_csh_payment_req_pay_ds_update(ds, record, name, value, oldvalue) {
                var handling_charge = record.get('handling_charge');
                if (Ext.isEmpty(handling_charge)) {
                    handling_charge = 0;
                }
                if (name == 'currency_code') {
                    if (value != oldvalue) {
                        record.set('exchange_rate', '');
                        record.set('exchange_rate_type', '');
                        record.set('rate_method_code', '');
                        record.set('exchange_rate_type_display', '');
                        record.set('exchange_rate_quotation', '');
                        if (oldvalue != null && oldvalue != '') {
                            record.set('transaction_amount', '');
                            record.set('transaction_functional_amount', '');
                            record.set('handling_charge', '');
                        }
                    }
                    if (value == record.get('functional_currency_code')) {
                        record.getField('exchange_rate_type_display').setRequired(false);
                        record.getField('exchange_rate_type').setReadOnly(true);
                        record.getField('exchange_rate_type_display').setReadOnly(true);
                        record.getField('exchange_rate').setReadOnly(true);
                        record.set('exchange_rate', 1);
                    } else {
                        record.set('exchange_rate_type', '${/model/fnd_financial_option_path/record/@default_exchange_rate_type}');
                        record.set('rate_method_code', '${/model/fnd_financial_option_path/record/@rate_method_code}');
                        record.set('exchange_rate_type_display', '${/model/fnd_financial_option_path/record/@exchange_rate_type_display}');
                        record.getField('exchange_rate_type_display').setRequired(true);
                        record.getField('exchange_rate_type_display').setReadOnly(false);
                    }
                } else if (name == 'rate_method_code') {
                    record.set('exchange_rate_quotation', '');
                    record.set('exchange_rate', '');
            
                    if (value == 'PERIOD' || value == 'DAILY' || value == 'FIXED') {
                        record.getField('exchange_rate').setReadOnly(true);
                        record.set('exchange_rate', '');
                        getExchangeRate({
                            fromCur: record.get('functional_currency_code'),
                            toCur: record.get('currency_code'),
                            exchangeRateType: record.get('exchange_rate_type'),
                            exchangeDate: record.get('transaction_date'),
                            periodName: record.get('period_name')
                        });
                    } else {
                        record.getField('exchange_rate').setReadOnly(false);
                        record.set('exchange_rate', '');
                    }
                } else if (name == 'exchange_rate') {
                    if (record.get('exchange_rate') != null && record.get('exchange_rate') != '') {
                        setfunctionamount(record);
                    } else {
                        record.set('transaction_functional_amount', '');
                    }
                } else if (name == 'handling_charge') {
                    if (value === 0 && record.get('zero_amounts_allowed') == 'N') {
                        Aurora.showMessage('${l:PROMPT}', '${l:CSH510.ZERO_AMOUNTS_ALLOWED}');
                    }
                    if (record.get('currency_code') == record.get('functional_currency_code')) {
                        record.set('transaction_functional_amount', value + record.get('transaction_amount'));
                    } else {
                        setfunctionamount(record);
                    }
                } else if (name == 'transaction_amount') {
                    if (value === 0 && record.get('zero_amounts_allowed') == 'N') {
                        Aurora.showMessage('${l:PROMPT}', '${l:CSH510.ZERO_AMOUNTS_ALLOWED}');
                    }
                    if (record.get('currency_code') == record.get('functional_currency_code')) {
                        record.set('transaction_functional_amount', value + handling_charge);
                    } else {
                        setfunctionamount(record);
                    }
                } else if (name == 'transaction_date') {
                    showPeriod(record);
                } else if (name == 'precision') {
                    record.getField('transaction_amount').setPropertity('decimalprecision', value);
                    record.getField('transaction_functional_amount').setPropertity('decimalprecision', value);
                    record.getField('handling_charge').setPropertity('decimalprecision', value);
                    if (record.get('transaction_amount') || record.get('transaction_amount') == 0 || record.get('handling_charge')) {
                        setfunctionamount(record);
                    }
                } else if (name == 'bank_account_id') {
                    if (record.get('zero_amounts_allowed') == 'N' && record.get('transaction_amount') === 0) {
                        Aurora.showMessage('${l:PROMPT}', '${l:CSH510.ZERO_AMOUNTS_ALLOWED}');
                    }
                }
            }
            
            function showPeriod(record) {
                var r_date = record.get('transaction_date');
                r_date = Aurora.formatDate(r_date);
                Aurora.request({
                    url: $('get_period_name_id').getUrl(),
                    para: {
                        p_date: r_date
                    },
                    success: function(res) {
                        if (res) {
                            var period_name = res.result.record.period_name,
                                internal_period_num = res.result.record.internal_period_num;
                            if (period_name) {
                                record.set('period_name', period_name);
                                record.set('internal_period_num', internal_period_num);
                            } else {
                                record.set('period_name', '');
                                record.set('internal_period_num', '');
                            }
                        }
                    },
                    scope: this
                });
            }
            
            function getExchangeRate(param) {
            
                Aurora.request({
                    url: $('get_exchange_rate_link_id').getUrl(),
                    para: {
                        from_currency: param.fromCur,
                        to_currency: param.toCur,
                        exchange_date: param.exchangeDate,
                        exchange_period_name: param.periodName,
                        exchange_rate_type: param.exchangeRateType
                    },
                    success: setRateAndQuotation,
                    scope: this
                });
            }
            
            function setRateAndQuotation(res) {
                var record = $('csh_payment_req_pay_ds').getCurrentRecord();
                if (Ext.isDefined(res.result.record.exchange_rate)) {
                    record.set('exchange_rate', res.result.record.exchange_rate);
                }
                if (Ext.isDefined(res.result.record.exchange_rate_quotation)) {
                    record.set('exchange_rate_quotation', res.result.record.exchange_rate_quotation);
                } else {
                    record.set('exchange_rate_quotation', 'DIRECT QUOTATION');
                }
            }
            
            function setfunctionamount(record) {
                var quotation = record.get('exchange_rate_quotation');
                var a = record.get('transaction_amount');
                var b = record.get('exchange_rate');
                var c = record.get('handling_charge');
                if (Ext.isEmpty(c)) {
                    c = 0;
                }
                a = a + c;
                if (Ext.isDefined(a) && Ext.isDefined(b)) {
                    if (quotation == 'DIRECT QUOTATION') {
                        record.set('transaction_functional_amount', parseFloat((a / b).toFixed(record.get('precision'))));
                    } else {
                        record.set('transaction_functional_amount', parseFloat((a * b).toFixed(record.get('precision'))));
                    }
                }
            }
        ]]></script>
        <a:dataSets>
            <a:dataSet id="payment_method_ds">
                <a:datas dataSource="/model/payment_method_path"/>
            </a:dataSet>
            <a:dataSet id="exchangerate_type_ds">
                <a:datas dataSource="/model/exchangerate_type_path"/>
            </a:dataSet>
            <a:dataSet id="payment_type_ds" lookupCode="CSH_PAYMENT_TYPE"/>
            <a:dataSet id="csh_payment_req_pay_ds" autoCreate="true">
                <a:fields>
                    <a:field name="bp_code" lovGridHeight="300" lovHeight="500" lovService="csh.CSH501.csh_payment_bp_for_lov?bp_id=${/model/payment_req_selected/record/@tenant_bp_id}" lovWidth="530" required="false" title="CSH502.CSH_PAYMENT_OBJ">
                        <a:mapping>
                            <a:map from="bp_code" to="bp_code"/>
                            <a:map from="bp_name" to="bp_name"/>
                            <a:map from="bp_id" to="bp_id"/>
                            <a:map from="bp_category" to="bp_category"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="exchange_rate_type_display" displayField="type_name" options="exchangerate_type_ds" readOnly="true" returnField="exchange_rate_type" valueField="type_code">
                        <a:mapping>
                            <a:map from="type_code" to="exchange_rate_type"/>
                            <a:map from="rate_method_code" to="rate_method_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="transaction_date" required="true"/>
                    <a:field name="exchange_rate_type"/>
                    <a:field name="exchange_rate" readOnly="true" required="false"/>
                    <a:field name="rate_method_code"/>
                    <a:field name="transaction_amount" required="true"/>
                    <a:field name="transaction_functional_amount" readOnly="true" required="true"/>
                    <a:field name="bank_account_code" autoComplete="true" autoCompleteField="bank_account_num" lovGridHeight="350" lovHeight="550" lovLabelWidth="90" lovService="csh.CSH101.csh_bank_account_lov" lovWidth="850" required="true" title="CSH511.BANK_ACCOUNT_CODE">
                        <a:mapping>
                            <a:map from="precision" to="precision"/>
                            <a:map from="zero_amounts_allowed" to="zero_amounts_allowed"/>
                            <a:map from="bank_account_id" to="bank_account_id"/>
                            <a:map from="bank_account_num" to="bank_account_num"/>
                            <a:map from="bank_account_name" to="bank_account_name"/>
                            <a:map from="bank_account_code" to="bank_account_code"/>
                            <a:map from="currency_code" to="currency_code"/>
                            <a:map from="currency_name" to="currency_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="bp_bank_account_code" autoComplete="true" autoCompleteField="bank_account_num" lovGridHeight="350" lovHeight="550" lovLabelWidth="90" lovService="basic.hls_bp_master_bank_account_v_for_lov?enabled_flag=Y&amp;bp_enabled_flag=Y" lovWidth="580" title="CSH511.BANK_ACCOUNT_CODE">
                        <a:mapping>
                            <a:map from="bank_account_id" to="bp_bank_account_id"/>
                            <a:map from="bank_account_num" to="bp_bank_account_num"/>
                            <a:map from="bank_account_name" to="bp_bank_account_name"/>
                            <a:map from="bank_account_code" to="bp_bank_account_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_method_display" displayField="description" options="payment_method_ds" returnField="payment_method_id" valueField="payment_method_id"/>
                    <a:field name="payment_req_id" defaultValue="${/parameter/@payment_req_id}"/>
                    <a:field name="payment_type"/>
                    <a:field name="payment_type_desc" displayField="code_value_name" options="payment_type_ds" required="true" returnField="payment_type" valueField="code_value"/>
                </a:fields>
                <a:events>
                    <a:event name="add" handler="on_csh_payment_req_pay_ds_add"/>
                    <a:event name="update" handler="on_csh_payment_req_pay_ds_update"/>
                </a:events>
            </a:dataSet>
        </a:dataSets>
        <a:screenBody>
            <a:screenTopToolbar>
                <a:gridButton click="csh502_payment_pay_back" text="HLS.BACK"/>
                <a:gridButton click="csh502_payment_pay_submit" text="CSH502.CSH_PAY"/>
                <!-- <a:gridButton click="csh502_payment_pay_reset" text="HLS.RESET"/> -->
            </a:screenTopToolbar>
            <a:form labelWidth="100" title="CSH502.CSH_PAYMENT_REQ_PAY">
                <a:box column="4">
                    <a:textField name="bp_name" bindTarget="csh_payment_req_pay_ds" prompt="CSH501.CSH_PAYMENT_OBJ_NAME" readOnly="true" width="150"/>
                    <a:numberField name="residual_amount" allowDecimals="true" allowFormat="true" bindTarget="csh_payment_req_pay_ds" prompt="CSH501.CSH_RESIDUAL_AMOUNT" readOnly="true" width="150"/>
                    <a:comboBox name="payment_method_display" bindTarget="csh_payment_req_pay_ds" prompt="HLS.PAYMENT_METHOD"/>
                    <a:numberField name="exchange_rate" allowNegative="false" bindTarget="csh_payment_req_pay_ds" decimalPrecision="-1" prompt="HLS.EXCHANGE_RATE" readOnly="true" width="150"/>
                </a:box>
                <a:box column="4">
                    <a:datePicker name="transaction_date" bindTarget="csh_payment_req_pay_ds" prompt="保险费支付日期" width="150"/>
                    <a:numberField name="transaction_amount" allowDecimals="true" allowFormat="true" bindTarget="csh_payment_req_pay_ds" prompt="保证金金额" width="150"/>
                    <a:textField name="period_name" bindTarget="csh_payment_req_pay_ds" prompt="HLS.ACCOUNT_PERIOD_NAME" readOnly="true"/>
                    <a:textField name="currency_name" bindTarget="csh_payment_req_pay_ds" prompt="HLS.CURRENCY" readOnly="true" width="150"/>
                </a:box>
                <a:box column="4">
                    <a:lov name="bank_account_code" bindTarget="csh_payment_req_pay_ds" prompt="支付账户代码" width="150"/>
                    <a:textField name="bank_account_num" bindTarget="csh_payment_req_pay_ds" prompt="我方支付银行账号" readOnly="true" width="150"/>
                    <a:lov name="bp_bank_account_code" bindTarget="csh_payment_req_pay_ds" prompt="支付对方账户代码"/>
                    <a:textField name="bp_bank_account_num" bindTarget="csh_payment_req_pay_ds" prompt="支付对方账户账号" readOnly="true"/>
                </a:box>
                <a:box column="4">
                    <a:textField name="bank_account_name" bindTarget="csh_payment_req_pay_ds" prompt="我方支付账户名称" readOnly="true" width="382"/>
                    <a:textField name="bp_bank_account_name" bindTarget="csh_payment_req_pay_ds" prompt="支付对方账户名称" readOnly="true" width="382"/>
                </a:box>
                <a:box column="1">
                    <a:textField name="payment_description" bindTarget="csh_payment_req_pay_ds" prompt="HLS.COMMENT" width="849"/>
                </a:box>
            </a:form>
        </a:screenBody>
    </a:view>
</a:screen>
